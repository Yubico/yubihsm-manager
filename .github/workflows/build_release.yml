name: "Building binaries for Linux, MacOS and Windows"

on: [push]

jobs:

  source:
    name: Build dist with Linux
    runs-on: ubuntu-latest
    env:
      VERSION: 0.2.0
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Create tar.gz
        run: |
          set -x
          ./resources/release/make_src_dist.sh $VERSION
          mkdir $GITHUB_WORKSPACE/artifact
          mv $GITHUB_WORKSPACE/../yubihsm-manager-$VERSION.tar.gz $GITHUB_WORKSPACE/artifact/
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: yubihsm-manager-src
          path: artifact


  debian_based:
    strategy:
      fail-fast: false
      matrix:
        environment: [
          "ubuntu:24.10",
          "ubuntu:24.04",
          "ubuntu:22.04",
          "ubuntu:20.04",
          "debian:12",
          "debian:11",
        ]
        libyubihsm_tag : [ "2.6.0" ]

    name: build on ${{ matrix.environment }}
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}

    steps:

      - name: clone repository
        uses: actions/checkout@v4
        with:
          path: yubihsm-manager

      - name: extract platform name
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
        run: |
          # Remove everything from DOCKER_IMAGE that is not a letter or a number
          PLATFORM=$(echo -n "$DOCKER_IMAGE" | sed -E 's/[^a-zA-Z0-9]//g')
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

      - name: install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          set -x
          export DEBIAN_FRONTEND=noninteractive

          apt-get update && apt-get dist-upgrade -y
          apt-get install -y build-essential      \
                                  chrpath              \
                                  cmake                \
                                  pkg-config           \
                                  gengetopt            \
                                  help2man             \
                                  libedit-dev          \
                                  libcurl4-openssl-dev \
                                  liblzma-dev          \
                                  libssl-dev           \
                                  libseccomp-dev       \
                                  libusb-1.0.0-dev     \
                                  dh-exec              \
                                  git-buildpackage     \
                                  curl                 \
                                  libpcsclite-dev      \
                                  file                 \
                                  curl                 \
                                  jq

          curl -o rustup.sh https://sh.rustup.rs
          bash ./rustup.sh -y
          export PATH=$PATH:$HOME/.cargo/bin
          cargo install cargo-deb


      - name: install libyubihsm
        working-directory: yubihsm-manager
        env:
          LIBYUBIHSM_TAG: ${{ matrix.libyubihsm_tag }}
          PLATFORM: ${{ env.PLATFORM }}
        run: |
          set -x

          echo "platform = $PLATFORM"

          cd ..

          #git clone --branch $LIBYUBIHSM_TAG https://github.com/Yubico/yubihsm-shell.git
          git clone https://github.com/Yubico/yubihsm-shell.git
          cd yubihsm-shell

          if [ "$PLATFORM" = "ubuntu2404" ] || [ "$PLATFORM" = "ubuntu2410" ]; then
            # ubuntu 24.04 comes with _FORTIFY_SOURCE already set
            sed -i 's/add_definitions (-D_FORTIFY_SOURCE=2)/add_definitions (-D_FORTIFY_SOURCE=3)/' cmake/SecurityFlags.cmake
          fi

          if [ "$PLATFORM" = "ubuntu2410" ]; then
            # Set PCSC flags
            sed -i 's/#SET(CMAKE_C_FLAGS/SET(CMAKE_C_FLAGS/' ykhsmauth/CMakeLists.txt
          fi

          if [ "$PLATFORM" = "debian11" ]; then
            dpkg-buildpackage -b --no-sign
          else
            dpkg-buildpackage
          fi
          dpkg -i ../libyubihsm*_amd64.deb
          
          pwd
          
          ls ..

      - name: clone yubihsmrs
        working-directory: yubihsm-manager
        run: |
          set -x -e
          cd ..
          git clone -b yubihsm-manager https://github.com/Yubico/yubihsmrs.git

      - name: Build binary
        working-directory: yubihsm-manager
        env:
          PLATFORM: ${{ env.PLATFORM }}
        run: |
          set -x -e
          OUTPUT=$GITHUB_WORKSPACE/$PLATFORM/yubihsm-manager
          mkdir -p $OUTPUT

          #cd ..
          export PATH=$PATH:$HOME/.cargo/bin
          #if [[ ! -x $(command -v rustc) ]]; then
          #  curl -o rustup.sh https://sh.rustup.rs
          #  bash ./rustup.sh -y
          #fi
          #cargo install cargo-deb

          #YUBIHSM_LIB_DIR=$(dpkg -L libyubihsm1 | grep -e "libyubihsm.so.2$" | xargs dirname) cargo build --release
          YUBIHSM_LIB_DIR=/usr/lib/x86_64-linux-gnu  cargo build --release
          strip --strip-all target/release/yubihsm-manager
          cargo deb --no-build
          cp target/debian/*.deb $OUTPUT/

          cd $OUTPUT
          rm -f yubihsm-manager-$PLATFORM-amd64.tar.gz
          tar -C .. -zcvf ../yubihsm-manager-$PLATFORM-amd64.tar.gz yubihsm-manager
          rm -f *.deb
          rm -rf ../yubihsm-manager

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "yubihsm-manager-${{ env.PLATFORM }}-amd64"
          path: ${{ env.PLATFORM }}

  redhat_based:
    strategy:
      fail-fast: false
      matrix:
        environment: [
          "fedora:41",
          "fedora:40",
        ]

    name: build on ${{ matrix.environment }}
    runs-on: ubuntu-latest
    container: ${{ matrix.environment }}

    steps:

      - name: clone the repository
        uses: actions/checkout@v4
        with:
          path: yubihsm-manager

      - name: extract platform name
        env:
          DOCKER_IMAGE: ${{ matrix.environment }}
        run: |
          # Remove everything from DOCKER_IMAGE that is not a letter or a number
          PLATFORM=$(echo -n "$DOCKER_IMAGE" | sed -E 's/[^a-zA-Z0-9]//g')
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

      - name: install dependencies
        env:
          PLATFORM: ${{ env.PLATFORM }}
        run: |
          dnf -y update
          dnf -y install  binutils         \
                          gcc              \
                          gcc-c++          \
                          git              \
                          chrpath          \
                          cmake            \
                          openssl-devel    \
                          libedit-devel    \
                          libcurl-devel    \
                          rpmdevtools      \
                          pcsc-lite-devel  \
                          libusb1-devel    \

          curl -o rustup.sh https://sh.rustup.rs
          bash ./rustup.sh -y

      - name: install libyubihsm
        run: |
          git clone https://github.com/Yubico/yubihsm-shell.git
          cd yubihsm-shell
            mkdir build
            cd build
            cmake .. -DBUILD_ONLY_LIB=ON
            make

      - name: clone yubihsmrs
        run: |
          git clone -b yubihsm-manager https://github.com/Yubico/yubihsmrs.git

      - name: build release binary
        working-directory: yubihsm-manager
        env:
          PLATFORM: ${{ env.PLATFORM }}
        run: |

          export PATH=$PATH:~/.cargo/bin
          if [[ ! -x $(command -v rustc) ]]; then
            curl -o rustup.sh https://sh.rustup.rs
            bash ./rustup.sh -y
          fi

          OUTPUT=$GITHUB_WORKSPACE/$PLATFORM/yubihsm-manager
          mkdir -p $OUTPUT

          cargo install cargo-rpm
          cargo rpm init
          YUBIHSM_LIB_DIR=$GITHUB_WORKSPACE/yubihsm-shell/build/lib cargo build --release
          YUBIHSM_LIB_DIR=$GITHUB_WORKSPACE/yubihsm-shell/build/lib cargo rpm build
          cp target/release/rpmbuild/RPMS/x86_64/*.rpm $OUTPUT/
          
          ls $GITHUB_WORKSPACE/yubihsm-shell/build/lib

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "yubihsm-manager-${{ env.PLATFORM }}-amd64"
          path: ${{ env.PLATFORM }}

  MacOS-Build:
    name: MacOS
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: amd
          - os: macos-latest-xlarge
            arch: arm
    env:
      YUBIHSMSDK_VERSION: 2024-09

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # download yubihsm-sdk installer from dev.y.c and install it
      - name: install yubihsm-shell
        run: |
          set -e -o pipefail
          set -x

          cd ..
          curl -L --max-redirs 2 -o yubihsm-sdk-installer.pkg https://developers.yubico.com/YubiHSM2/Releases/yubihsm2-sdk-$YUBIHSMSDK_VERSION-darwin-universal.pkg
          sudo installer -verbose -store -pkg yubihsm-sdk-installer.pkg -target /

      - name: clone yubihsmrs
        run: |
          set -e -o pipefail
          set -x

          cd ..
          git clone -b yubihsm-manager https://github.com/Yubico/yubihsmrs.git

      - name: Build yubihsm-manager
        run: |
          set -e -o pipefail
          set -x
          mkdir -p artifact

          cd ..
          #brew install libusb
          export PATH=$PATH:~/.cargo/bin
          if [[ ! -x $(command -v rustc) ]]; then
            curl -o rustup.sh https://sh.rustup.rs
            bash ./rustup.sh -y
          fi

          ls -l /usr/local/lib


          cd yubihsm-manager
          RUSTFLAGS="-C link-args=-Wl,-rpath,../lib"  YUBIHSM_LIB_DIR=/usr/local/lib cargo build --release
          strip -u -r target/release/yubihsm-manager

          install target/release/yubihsm-manager artifact

          cd artifact

          install_name_tool -change "/opt/homebrew/opt/openssl@3/lib/libcrypto.3.dylib" "/usr/local/lib/libcrypto.3.dylib" "yubihsm-manager"
          #install_name_tool -change "/opt/homebrew/opt/openssl@3/lib/libssl.3.dylib" "../lib/libssl.3.dylib" "yubihsm-manager"
          install_name_tool -change "@rpath/libyubihsm.2.dylib" "/usr/local/lib/libyubihsm.2.6.0.dylib" "yubihsm-manager"

          otool -L yubihsm-manager
          #otool -l yubihsm-manager

          ./yubihsm-manager --version
          ./yubihsm-manager --help




      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: yubihsm-manager-macos-${{ matrix.arch }}
          path: artifact

  Windows-Build:
    name: Windows
    runs-on: windows-latest
    env:
      LIBYUBIHSM_VERSION: 2.6.0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # downloads and build yubihsm-shell from source release on dev.y.c
      - name: install yubihsm-shell
        run: |
          $ErrorActionPreference = "Stop"
          Set-PSDebug -Trace 1

          cd ..
          Invoke-WebRequest -Uri https://developers.yubico.com/yubihsm-shell/Releases/yubihsm-shell-$env:LIBYUBIHSM_VERSION-win64.msi -OutFile yubihsm-shell.msi -UseBasicParsing

          $log = "$env:GITHUB_WORKSPACE\install.log"
          $procMain = Start-Process "msiexec" "/i `"yubihsm-shell.msi`" /qn /l*! `"$log`"" -NoNewWindow -PassThru
          $procMain.WaitForExit()

      - name: clone yubihsmrs
        run: |
          $ErrorActionPreference = "Stop"
          Set-PSDebug -Trace 1

          cd ..
          git clone -b yubihsm-manager https://github.com/Yubico/yubihsmrs.git

      - name: Build yubihsm-manager
        run: |
          $ErrorActionPreference = "Stop"
          Set-PSDebug -Trace 1

          mkdir artifact
          
          C:/vcpkg/vcpkg.exe install openssl:x64-windows
          $env:OPENSSL_ROOT_DIR ="C:/vcpkg/packages/openssl_x64-windows"

          $env:OPENSSL_LIB_DIR="$env:OPENSSL_ROOT_DIR\lib"
          $env:OPENSSL_INCLUDE_DIR="$env:OPENSSL_ROOT_DIR\include"
          $env:OPENSSL_DIR="$env:OPENSSL_ROOT_DIR"
          
          #$env:OPENSSL_LIB_DIR="C:\Strawberry\c\lib"
          #$env:OPENSSL_INCLUDE_DIR="C:\Strawberry\c\include"
          #$env:OPENSSL_DIR="C:\Strawberry\c"
          
          ls $env:OPENSSL_DIR/
          ls $env:OPENSSL_DIR/bin

          rustup target add x86_64-pc-windows-gnu
          rustup default stable-x86_64-pc-windows-gnu

          $env:RUST_BACKTRACE=1
          $env:YUBIHSM_LIB_DIR="C:\Program Files\Yubico\YubiHSM Shell\bin"
          #$env:PATH+=";C:\Program Files\Yubico\YubiHSM Shell\bin;C:\rtools44\x86_64-w64-mingw32.static.posix\bin"
          $env:PATH+=";C:\Program Files\Yubico\YubiHSM Shell\bin"
          cargo.exe update
          cargo.exe build --release
          ./target/release/yubihsm-manager.exe --help
          ./target/release/yubihsm-manager.exe --version
          install target/release/yubihsm-manager $env:GITHUB_WORKSPACE/artifact/yubihsm-manager

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: yubihsm-manager-windows
          path: artifact
